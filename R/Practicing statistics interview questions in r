For one hot encoding, you can use dummyVars() from the caret package.

To use it, first create the encoder and then transform the dataset:

encoder <- dummyVars(~ category, data = df)
predict(encoder, newdata = df)

# ============================================

# Fit a linear model
lm(Pulse ~ Exer, data = survey)

# Create one hot encoder
encoder <- dummyVars(~ Exer, data = survey)

# Encode Exer
Exer_encoded <- predict(encoder, newdata = survey)

# Bind intercept and independent variables
X <- cbind(1, Exer_encoded[, 2:3])

# Compute coefficients
solve((t(X)%*%X))%*%t(X)%*%survey$Pulse

# =============================================

# Time series

library(xts)

# View the structure of gas
str(gas)

# Coerce to date class
gas$Date <- as.Date(gas$Date)

# Create the xts object
gas_ts <- xts(x = gas$Price, order.by = gas$Date)

# Plot the time series
plot(gas_ts)

# =======

library(xts)

# Create the sequence of dates
dates_2014 <- seq(from = as.Date("2014-01-01"), to = as.Date("2014-12-31"), by = "1 day")

# Subset the time series
gas_2014 <- gas_ts[dates_2014]

# Plot the time series
plot(gas_2014)

# Compute monthly means
apply.monthly(gas_2014, mean, na.rm = TRUE)

# =============================================

# Plot the unrotated data
plot(Bwt ~ Hwt, data = cats)

# Perform PCA
pca_cats <- prcomp(~ Bwt + Hwt, data = cats)

# Compute the summary
summary(pca_cats)

# Compute the rotated data
principal_components <- predict(pca_cats)

# Plot the rotated data
plot(principal_components)

####

# Omit components for which the standard deviation is lower than 0.25 of the first component's #standard deviation.

# Perform PCA on letters
pca_letters <- prcomp(letters, tol = 0.25)

# Output spread measures of principal components
summary(pca_letters)

#####
#  Limit the number of principal components to 7.

# Perform PCA on letters
pca_letters <- prcomp(letters, rank = 7)

# Output spread measures of principal components
summary(pca_letters)
