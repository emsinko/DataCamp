### Project Euler  


## PROBLEM 2

# Each new term in the Fibonacci sequence is generated by adding the previous two 
# terms. By starting with 1 and 2, the first 10 terms will be:

#              1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not 
# exceed four million, find the sum of the even-valued terms.

import numpy as np

fibo = [1, 2]
OK = True
while OK:
    if(fibo[-1] < 4000000):
        fibo.append(fibo[-1] + fibo[-2])
    else:
        OK = False
fibo = np.array(fibo)
        
np.sum(fibo[fibo % 2 == 0])

##########################################################################

## PROBLEM 3
import numpy as np

def is_prime(x):
    suma = 0
    if x == 2 or x == 3:
        return(True)
    elif x < 2 or x==4 :
        return(False)
    for i in np.arange(2, int(np.sqrt(x)) + 1):
        if(x % i == 0):
            suma += 1
    return(suma == 0)


num = 600851475143
i = 2
OK = True
while OK: 
    if(num % i == 0):
        if(is_prime(num/i)):
            print(num/i)
            OK = False
    i += 1


##########################################################################

## PROBLEM 35

"""
The number, 197, is called a circular prime because all rotations of the digits: 
    197, 971, and 719, are themselves prime.
There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.
How many circular primes are there below one million?
"""
    
odd = [1,3,5,7,9]  #np.arange(1,9+1,2)
circular = [2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, 97]

import itertools
perm = list(itertools.permutations([1,2,3]))
1:14:2
x[2]
x[2]
x[[0,2,1]]
print(perm)
x = "194"
np.arraalen(x)
(itertools.permutations([1,2,3]))
list(itertools.permutations(x))